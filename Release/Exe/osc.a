;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 04.02.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <sleep.h>
;#include <delay.h>
;#include "glcdfont.c"
;// Standard ASCII 5x7 font
;flash unsigned char font[] = {
;    0x00, 0x00, 0x00, 0x00, 0x00,
;	0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
;	0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
;	0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
;	0x18, 0x3C, 0x7E, 0x3C, 0x18,
;	0x1C, 0x57, 0x7D, 0x57, 0x1C,
;	0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
;	0x00, 0x18, 0x3C, 0x18, 0x00,
;	0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
;	0x00, 0x18, 0x24, 0x18, 0x00,
;	0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
;	0x30, 0x48, 0x3A, 0x06, 0x0E,
;	0x26, 0x29, 0x79, 0x29, 0x26,
;	0x40, 0x7F, 0x05, 0x05, 0x07,
;	0x40, 0x7F, 0x05, 0x25, 0x3F,
;	0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
;	0x7F, 0x3E, 0x1C, 0x1C, 0x08,
;	0x08, 0x1C, 0x1C, 0x3E, 0x7F,
;	0x14, 0x22, 0x7F, 0x22, 0x14,
;	0x5F, 0x5F, 0x00, 0x5F, 0x5F,
;	0x06, 0x09, 0x7F, 0x01, 0x7F,
;	0x00, 0x66, 0x89, 0x95, 0x6A,
;	0x60, 0x60, 0x60, 0x60, 0x60,
;	0x94, 0xA2, 0xFF, 0xA2, 0x94,
;	0x08, 0x04, 0x7E, 0x04, 0x08,
;	0x10, 0x20, 0x7E, 0x20, 0x10,
;	0x08, 0x08, 0x2A, 0x1C, 0x08,
;	0x08, 0x1C, 0x2A, 0x08, 0x08,
;	0x1E, 0x10, 0x10, 0x10, 0x10,
;	0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
;	0x30, 0x38, 0x3E, 0x38, 0x30,
;	0x06, 0x0E, 0x3E, 0x0E, 0x06,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x5F, 0x00, 0x00,
;	0x00, 0x07, 0x00, 0x07, 0x00,
;	0x14, 0x7F, 0x14, 0x7F, 0x14,
;	0x24, 0x2A, 0x7F, 0x2A, 0x12,
;	0x23, 0x13, 0x08, 0x64, 0x62,
;	0x36, 0x49, 0x56, 0x20, 0x50,
;	0x00, 0x08, 0x07, 0x03, 0x00,
;	0x00, 0x1C, 0x22, 0x41, 0x00,
;	0x00, 0x41, 0x22, 0x1C, 0x00,
;	0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
;	0x08, 0x08, 0x3E, 0x08, 0x08,
;	0x00, 0x80, 0x70, 0x30, 0x00,
;	0x08, 0x08, 0x08, 0x08, 0x08,
;	0x00, 0x00, 0x60, 0x60, 0x00,
;	0x20, 0x10, 0x08, 0x04, 0x02,
;	0x3E, 0x51, 0x49, 0x45, 0x3E,
;	0x00, 0x42, 0x7F, 0x40, 0x00,
;	0x72, 0x49, 0x49, 0x49, 0x46,
;	0x21, 0x41, 0x49, 0x4D, 0x33,
;	0x18, 0x14, 0x12, 0x7F, 0x10,
;	0x27, 0x45, 0x45, 0x45, 0x39,
;	0x3C, 0x4A, 0x49, 0x49, 0x31,
;	0x41, 0x21, 0x11, 0x09, 0x07,
;	0x36, 0x49, 0x49, 0x49, 0x36,
;	0x46, 0x49, 0x49, 0x29, 0x1E,
;	0x00, 0x00, 0x14, 0x00, 0x00,
;	0x00, 0x40, 0x34, 0x00, 0x00,
;	0x00, 0x08, 0x14, 0x22, 0x41,
;	0x14, 0x14, 0x14, 0x14, 0x14,
;	0x00, 0x41, 0x22, 0x14, 0x08,
;	0x02, 0x01, 0x59, 0x09, 0x06,
;	0x3E, 0x41, 0x5D, 0x59, 0x4E,
;	0x7C, 0x12, 0x11, 0x12, 0x7C,
;	0x7F, 0x49, 0x49, 0x49, 0x36,
;	0x3E, 0x41, 0x41, 0x41, 0x22,
;	0x7F, 0x41, 0x41, 0x41, 0x3E,
;	0x7F, 0x49, 0x49, 0x49, 0x41,
;	0x7F, 0x09, 0x09, 0x09, 0x01,
;	0x3E, 0x41, 0x41, 0x51, 0x73,
;	0x7F, 0x08, 0x08, 0x08, 0x7F,
;	0x00, 0x41, 0x7F, 0x41, 0x00,
;	0x20, 0x40, 0x41, 0x3F, 0x01,
;	0x7F, 0x08, 0x14, 0x22, 0x41,
;	0x7F, 0x40, 0x40, 0x40, 0x40,
;	0x7F, 0x02, 0x1C, 0x02, 0x7F,
;	0x7F, 0x04, 0x08, 0x10, 0x7F,
;	0x3E, 0x41, 0x41, 0x41, 0x3E,
;	0x7F, 0x09, 0x09, 0x09, 0x06,
;	0x3E, 0x41, 0x51, 0x21, 0x5E,
;	0x7F, 0x09, 0x19, 0x29, 0x46,
;	0x26, 0x49, 0x49, 0x49, 0x32,
;	0x03, 0x01, 0x7F, 0x01, 0x03,
;	0x3F, 0x40, 0x40, 0x40, 0x3F,
;	0x1F, 0x20, 0x40, 0x20, 0x1F,
;	0x3F, 0x40, 0x38, 0x40, 0x3F,
;	0x63, 0x14, 0x08, 0x14, 0x63,
;	0x03, 0x04, 0x78, 0x04, 0x03,
;	0x61, 0x59, 0x49, 0x4D, 0x43,
;	0x00, 0x7F, 0x41, 0x41, 0x41,
;	0x02, 0x04, 0x08, 0x10, 0x20,
;	0x00, 0x41, 0x41, 0x41, 0x7F,
;	0x04, 0x02, 0x01, 0x02, 0x04,
;	0x40, 0x40, 0x40, 0x40, 0x40,
;	0x00, 0x03, 0x07, 0x08, 0x00,
;	0x20, 0x54, 0x54, 0x78, 0x40,
;	0x7F, 0x28, 0x44, 0x44, 0x38,
;	0x38, 0x44, 0x44, 0x44, 0x28,
;	0x38, 0x44, 0x44, 0x28, 0x7F,
;	0x38, 0x54, 0x54, 0x54, 0x18,
;	0x00, 0x08, 0x7E, 0x09, 0x02,
;	0x18, 0xA4, 0xA4, 0x9C, 0x78,
;	0x7F, 0x08, 0x04, 0x04, 0x78,
;	0x00, 0x44, 0x7D, 0x40, 0x00,
;	0x20, 0x40, 0x40, 0x3D, 0x00,
;	0x7F, 0x10, 0x28, 0x44, 0x00,
;	0x00, 0x41, 0x7F, 0x40, 0x00,
;	0x7C, 0x04, 0x78, 0x04, 0x78,
;	0x7C, 0x08, 0x04, 0x04, 0x78,
;	0x38, 0x44, 0x44, 0x44, 0x38,
;	0xFC, 0x18, 0x24, 0x24, 0x18,
;	0x18, 0x24, 0x24, 0x18, 0xFC,
;	0x7C, 0x08, 0x04, 0x04, 0x08,
;	0x48, 0x54, 0x54, 0x54, 0x24,
;	0x04, 0x04, 0x3F, 0x44, 0x24,
;	0x3C, 0x40, 0x40, 0x20, 0x7C,
;	0x1C, 0x20, 0x40, 0x20, 0x1C,
;	0x3C, 0x40, 0x30, 0x40, 0x3C,
;	0x44, 0x28, 0x10, 0x28, 0x44,
;	0x4C, 0x90, 0x90, 0x90, 0x7C,
;	0x44, 0x64, 0x54, 0x4C, 0x44,
;	0x00, 0x08, 0x36, 0x41, 0x00,
;	0x00, 0x00, 0x77, 0x00, 0x00,
;	0x00, 0x41, 0x36, 0x08, 0x00,
;	0x02, 0x01, 0x02, 0x04, 0x02,
;	0x3C, 0x26, 0x23, 0x26, 0x3C,
;    0x00, 0x00, 0x00, 0x00, 0x00,
;	0x7F, 0x01, 0x01, 0x01, 0x03 ,  // Ã
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	   0x7F, 0x01, 0x01, 0x01, 0x03 ,  // Ã
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	    0x7F, 0x49, 0x49, 0x49, 0x49 ,  // Å
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	     0x3E, 0x49, 0x49, 0x41, 0x22 , // ª
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	     0x00, 0x43, 0x7E, 0x43, 0x00,   // ¯
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	     0x00, 0x41, 0x7F, 0x41, 0x00 , // ²
;	     0x00, 0x44, 0x7d, 0x40, 0x00 , // ³
;	     0x7C, 0x04, 0x04, 0x04, 0x0C ,  // ã
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	     0x38, 0x54, 0x54, 0x54, 0x08 ,  // å
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	     0x38, 0x54, 0x54, 0x44, 0x28 , // º
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;	0x00, 0x00, 0x00, 0x00, 0x00,
;     0x00, 0x45, 0x7C, 0x41, 0x00 , // ¿
;	 0x7E, 0x11, 0x11, 0x11, 0x7E ,  // À
;     0x7F, 0x49, 0x49, 0x49, 0x33 ,  // Á
;     0x7F, 0x49, 0x49, 0x49, 0x36 ,  // Â
;     0x7F, 0x01, 0x01, 0x01, 0x03 ,  // Ã
;     0xE0, 0x51, 0x4F, 0x41, 0xFF ,  // Ä
;     0x7F, 0x49, 0x49, 0x49, 0x49 ,  // Å
;     0x77, 0x08, 0x7F, 0x08, 0x77 ,  // Æ
;     0x49, 0x49, 0x49, 0x49, 0x36 ,  // Ç
;     0x7F, 0x10, 0x08, 0x04, 0x7F ,  // È
;     0x7C, 0x21, 0x12, 0x09, 0x7C ,  // É
;     0x7F, 0x08, 0x14, 0x22, 0x41 ,  // Ê
;     0x20, 0x41, 0x3F, 0x01, 0x7F ,  // Ë
;     0x7F, 0x02, 0x0C, 0x02, 0x7F ,  // Ì
;     0x7F, 0x08, 0x08, 0x08, 0x7F ,  // Í
;     0x3E, 0x41, 0x41, 0x41, 0x3E ,  // Î
;     0x7F, 0x01, 0x01, 0x01, 0x7F ,  // Ï
;     0x7F, 0x09, 0x09, 0x09, 0x06 ,  // Ð
;     0x3E, 0x41, 0x41, 0x41, 0x22 ,  // Ñ
;     0x01, 0x01, 0x7F, 0x01, 0x01 ,  // Ò
;     0x27, 0x48, 0x48, 0x48, 0x3F ,  // Ó
;     0x1C, 0x22, 0x7F, 0x22, 0x1C ,  // Ô
;     0x63, 0x14, 0x08, 0x14, 0x63 ,  // Õ
;     0x7F, 0x40, 0x40, 0x40, 0xFF ,  // Ö
;     0x07, 0x08, 0x08, 0x08, 0x7F ,  // ×
;     0x7F, 0x40, 0x7F, 0x40, 0x7F ,  // Ø
;     0x7F, 0x40, 0x7F, 0x40, 0xFF ,  // Ù
;     0x01, 0x7F, 0x48, 0x48, 0x30 ,  // Ú
;     0x7F, 0x48, 0x30, 0x00, 0x7F ,  // Û
;     0x7F, 0x48, 0x48, 0x30, 0x00 ,  // Ü
;     0x22, 0x41, 0x49, 0x49, 0x3E ,  // Ý
;     0x7F, 0x08, 0x3E, 0x41, 0x3E ,  // Þ
;     0x46, 0x29, 0x19, 0x09, 0x7F ,  // ß
;     0x20, 0x54, 0x54, 0x54, 0x78 ,  // à
;     0x3C, 0x4A, 0x4A, 0x49, 0x31 ,  // á
;     0x7C, 0x54, 0x54, 0x28, 0x00 ,  // â
;     0x7C, 0x04, 0x04, 0x04, 0x0C ,  // ã
;     0xE0, 0x54, 0x4C, 0x44, 0xFC ,  // ä
;     0x38, 0x54, 0x54, 0x54, 0x08 ,  // å
;     0x6C, 0x10, 0x7C, 0x10, 0x6C ,  // æ
;     0x44, 0x44, 0x54, 0x54, 0x28 ,  // ç
;     0x7C, 0x20, 0x10, 0x08, 0x7C ,  // è
;     0x78, 0x42, 0x24, 0x12, 0x78 ,  // é
;     0x7C, 0x10, 0x28, 0x44, 0x00 ,  // ê
;     0x20, 0x44, 0x3C, 0x04, 0x7C ,  // ë
;     0x7C, 0x08, 0x10, 0x08, 0x7C ,  // ì
;     0x7C, 0x10, 0x10, 0x10, 0x7C ,  // í
;     0x38, 0x44, 0x44, 0x44, 0x38 ,  // î
;     0x7C, 0x04, 0x04, 0x04, 0x7C ,  // ï
;     0x7C, 0x14, 0x14, 0x14, 0x08 ,  // ð
;     0x38, 0x44, 0x44, 0x44, 0x44 ,  // ñ
;     0x04, 0x04, 0x7C, 0x04, 0x04 ,  // ò
;     0x0C, 0x50, 0x50, 0x50, 0x3C ,  // ó
;     0x18, 0x24, 0x7E, 0x24, 0x18 ,  // ô
;     0x44, 0x28, 0x10, 0x28, 0x44 ,  // õ
;     0x7C, 0x40, 0x40, 0x40, 0xFC ,  // ö
;     0x0C, 0x10, 0x10, 0x10, 0x7C ,  // ÷
;     0x7C, 0x40, 0x7C, 0x40, 0x7C ,  // ø
;     0x7C, 0x40, 0x7C, 0x40, 0xFC ,  // ù
;     0x04, 0x7C, 0x50, 0x50, 0x20 ,  // ú
;     0x7C, 0x50, 0x20, 0x00, 0x7C ,  // û
;     0x7C, 0x50, 0x50, 0x20, 0x00 ,  // ü
;     0x28, 0x44, 0x54, 0x54, 0x38 ,  // ý
;     0x7C, 0x10, 0x38, 0x44, 0x38 ,  // þ
;     0x08, 0x54, 0x34, 0x14, 0x7C   // ÿ
;};
;
;
;
;
;unsigned char buffer[1024] =  {
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
;0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
;0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF,
;0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
;0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x8C, 0x8E, 0x84, 0x00, 0x00, 0x80, 0xF8,
;0xF8, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80,
;0x00, 0xE0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xC7, 0x01, 0x01,
;0x01, 0x01, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x7C, 0xFE, 0xC7, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFF,
;0xFF, 0xFF, 0x00, 0x38, 0xFE, 0xC7, 0x83, 0x01, 0x01, 0x01, 0x83, 0xC7, 0xFF, 0xFF, 0x00, 0x00,
;0x01, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00, 0x7F, 0xFF,
;0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF,
;0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x03, 0x0F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x8F,
;0x8F, 0x9F, 0xBF, 0xFF, 0xFF, 0xC3, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC,
;0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x01, 0x03, 0x03, 0x03,
;0x03, 0x03, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01,
;0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00,
;0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
;0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03,
;0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F,
;0x87, 0xC7, 0xF7, 0xFF, 0xFF, 0x1F, 0x1F, 0x3D, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0x7C, 0x7D, 0xFF,
;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x00, 0x30, 0x30, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F,
;0x0F, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0,
;0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00,
;0x00, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x00, 0x00, 0xF0, 0xF8, 0x1C, 0x0E,
;0x06, 0x06, 0x06, 0x0C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFC,
;0xFE, 0xFC, 0x00, 0x18, 0x3C, 0x7E, 0x66, 0xE6, 0xCE, 0x84, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0x06,
;0x06, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0xC0, 0xF8,
;0xFC, 0x4E, 0x46, 0x46, 0x46, 0x4E, 0x7C, 0x78, 0x40, 0x18, 0x3C, 0x76, 0xE6, 0xCE, 0xCC, 0x80,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00,
;0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C,
;0x18, 0x18, 0x0C, 0x06, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x0C, 0x18, 0x0C, 0x0F,
;0x07, 0x01, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00,
;0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x07,
;0x07, 0x0C, 0x0C, 0x18, 0x1C, 0x0C, 0x06, 0x06, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
;};

	.DSEG
;
;
;
;
;
;void clearDisplay(void)
; 0000 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;int i0;
;    for(i0=0; i0<1024;i0++) buffer[i0] = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	i0 -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;
;
;
;void drawPixel(int x0, int y0, int color) {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;  if ((x0 < 0) || (x0 >= 128) || (y0 < 0) || (y0 >= 64))
;PCODE: $00000028 VOL: 0
;	x0 -> Y+4
;	y0 -> Y+2
;	color -> Y+0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;    return;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;    x0 = 128 - x0 - 1;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;    y0 = 64 - y0 - 1;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;  // x is which column
;    switch (color)
;PCODE: $00000044 VOL: 0
;    {
;      case 1:   buffer[x0+ (y0/8)*128] |=  (1 << (y0&7)); break;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;      case 0:   buffer[x0+ (y0/8)*128] &= ~(1 << (y0&7)); break;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;      case 2:  buffer[x0+ (y0/8)*128] ^=  (1 << (y0&7)); break;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;    }
;PCODE: $00000084 VOL: 0
;
;}
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;
;void drawChar(int x0, int y0, char c)
;{
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;int i0;
;for(i0 = 0 ;i0< 5;i0++) buffer[x0*6+y0*128+i0] = font[c*5+i0];
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;	x0 -> Y+5
;	y0 -> Y+3
;	c -> Y+2
;	i0 -> R16,R17
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;
;void drawString(int x0, int y0, char * str, int len)
;{
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;int i0;
;    for (i0 = 0; i0<len; i0++) drawChar(x0+i0,y0, str[i0]) ;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;	x0 -> Y+8
;	y0 -> Y+6
;	*str -> Y+4
;	len -> Y+2
;	i0 -> R16,R17
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;
;void drawLine(int x1, int y1, int x2, int y2, int color)
;{
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;int kx,ky;
;int znx, zny;
;if (x2 > 127) x2 = 127;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;	x1 -> Y+16
;	y1 -> Y+14
;	x2 -> Y+12
;	y2 -> Y+10
;	color -> Y+8
;	kx -> R16,R17
;	ky -> R18,R19
;	znx -> R20,R21
;	zny -> Y+6
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;if (x2 < 0) x2 = 0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;if (x1 > 127) x1 = 127 ;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;if (x1 < 0) x1 = 0 ;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;if (y2 > 63) y2 = 63;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;if (y2 < 0) y2 = 0;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;if (y1 > 63) y1 = 63;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;if (y1 < 0) y1 = 0;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;    if (x1 > x2) znx = -1; else znx = 1;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;    if (y1 > y2) zny = -1; else zny = 1;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;    kx = ((x2 - x1)*znx);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;    ky = ((y2 - y1)*zny);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;    drawPixel(x1,y1,color);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;    while ((kx + ky) > 0)
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;    {
;        if (kx > 0) if (ky / kx <= 1) x1 = x1 + znx;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;        if (ky > 0) if (kx / ky <= 1) y1 = y1 + zny;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;        kx = ((x2 - x1)*znx);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;        ky = ((y2 - y1)*zny);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;        drawPixel(x1,y1,color);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;    }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;
;}
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;// Declare your global variables here
;int i,a,n,time, met, x, y, x0 = 0, y0 = 32, maxr, maxl, kof;

	.DSEG
;unsigned char rx_data[1],bufer[129], tx_data0[50] = {0x80, 0xAE, 0x80, 0xD5,0x80, 0x80,0x80, 0xA8,0x80, 0x3F,0x80, 0xD3,
;0x80, 0x0,0x80, 0x40,0x80, 0x8D,0x80, 0x14,0x80, 0x20,0x80, 0x00,0x80,  0xA1, 0x80, 0xC8,0x80,
;0xDA,0x80, 0x12,0x80, 0x81,0x80, 0xCF,0x80, 0xD9,0x80, 0xF1,0x80, 0xDB,0x80, 0x40,0x80, 0xA4,
;0x80, 0xA6, 0x80, 0xAF };
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0027 {

	.CSEG
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0028 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000172 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0029 // Delay needed for the stabilization of the ADC input voltage
; 0000 002A delay_us(10);
;PCODE: $00000176 VOL: 0
; 0000 002B // Start the AD conversion
; 0000 002C ADCSRA|=(1<<ADSC);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 002D // Wait for the AD conversion to complete
; 0000 002E while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 002F ADCSRA|=(1<<ADIF);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0030 return ADCW;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0031 }
;PCODE: $00000186 VOL: 0
;
;
;// TWI functions
;#include <twi.h>
;
;void display(void)
; 0000 0038 {
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0039     bufer[0] = 0x80;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 003A     bufer[1] = 0x21;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 003B     bufer[2] = 0x80;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 003C     bufer[3] = 0;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 003D     bufer[4] = 0x80;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 003E     bufer[5] = 127;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 003F     bufer[6] = 0x80;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0040     bufer[7] = 0x22;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0041     bufer[8] = 0x80;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0042     bufer[9] = 0;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0043     bufer[10] = 0x80;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0044     bufer[11] = 7  ;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0045     twi_master_trans(0x3C, bufer, 12, rx_data, 0) ;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0046 
; 0000 0047        for (i=0; i<1024; ) {
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0048       // send a bunch of data in one xmission
; 0000 0049         bufer[0] = 0x40;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 004A         for (n=0; n<128; n++) {
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 004B         bufer[n+1] = buffer[i++];
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 004C         }
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 004D 
; 0000 004E         twi_master_trans(0x3C, bufer, 129, rx_data, 0) ;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 004F     }
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0050 }
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;
;
;void main(void)
; 0000 0054 {
;PCODE: $000001E7 VOL: 0
; 0000 0055 // Declare your local variables here
; 0000 0056 // Crystal Oscillator division factor: 1
; 0000 0057 #pragma optsize-
; 0000 0058 CLKPR=(1<<CLKPCE);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0059 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 005A #ifdef _OPTIMIZE_SIZE_
; 0000 005B #pragma optsize+
; 0000 005C #endif
; 0000 005D 
; 0000 005E // Input/Output Ports initialization
; 0000 005F // Port B initialization
; 0000 0060 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0061 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (3<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0062 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0063 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 0064 
; 0000 0065 // Port C initialization
; 0000 0066 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0067 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0068 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0069 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (1<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 006A 
; 0000 006B // Port D initialization
; 0000 006C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 006E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0070 
; 0000 0071 // Timer/Counter 0 initialization
; 0000 0072 // Clock source: System Clock
; 0000 0073 // Clock value: Timer 0 Stopped
; 0000 0074 // Mode: Normal top=0xFF
; 0000 0075 // OC0A output: Disconnected
; 0000 0076 // OC0B output: Disconnected
; 0000 0077 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0078 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0079 TCNT0=0x00;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 007A OCR0A=0x00;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 007B OCR0B=0x00;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 007C 
; 0000 007D // Timer/Counter 1 initialization
; 0000 007E // Clock source: System Clock
; 0000 007F // Clock value: Timer1 Stopped
; 0000 0080 // Mode: Normal top=0xFFFF
; 0000 0081 // OC1A output: Disconnected
; 0000 0082 // OC1B output: Disconnected
; 0000 0083 // Noise Canceler: Off
; 0000 0084 // Input Capture on Falling Edge
; 0000 0085 // Timer1 Overflow Interrupt: Off
; 0000 0086 // Input Capture Interrupt: Off
; 0000 0087 // Compare A Match Interrupt: Off
; 0000 0088 // Compare B Match Interrupt: Off
; 0000 0089 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 008A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 008B TCNT1H=0x00;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 008C TCNT1L=0x00;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 008D ICR1H=0x00;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 008E ICR1L=0x00;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 008F OCR1AH=0x00;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0090 OCR1AL=0x00;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0091 OCR1BH=0x00;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0092 OCR1BL=0x00;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0093 
; 0000 0094 // Timer/Counter 2 initialization
; 0000 0095 // Clock source: System Clock
; 0000 0096 // Clock value: 16000,000 kHz
; 0000 0097 // Mode: Fast PWM top=0xFF
; 0000 0098 // OC2A output: Non-Inverted PWM
; 0000 0099 // OC2B output: Non-Inverted PWM
; 0000 009A // Timer Period: 0,016 ms
; 0000 009B // Output Pulse(s):
; 0000 009C // OC2A Period: 0,016 ms Width: 0 us
; 0000 009D // OC2B Period: 0,016 ms Width: 0 us
; 0000 009E ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 009F TCCR2A=(1<<COM2A1) | (0<<COM2A0) | (1<<COM2B1) | (0<<COM2B0) | (1<<WGM21) | (1<<WGM20);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 00A0 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (1<<CS20);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 00A1 TCNT2=0x00;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 00A2 OCR2A=0x00;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 00A3 OCR2B=0x00;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 00A4 
; 0000 00A5 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00A6 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 00A7 
; 0000 00A8 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00A9 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 00AA 
; 0000 00AB // Timer/Counter 2 Interrupt(s) initialization
; 0000 00AC TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 00AD 
; 0000 00AE // External Interrupt(s) initialization
; 0000 00AF // INT0: Off
; 0000 00B0 // INT1: Off
; 0000 00B1 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00B2 // Interrupt on any change on pins PCINT8-14: Off
; 0000 00B3 // Interrupt on any change on pins PCINT16-23: Off
; 0000 00B4 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 00B5 EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 00B6 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 00B7 
; 0000 00B8 // USART initialization
; 0000 00B9 // USART disabled
; 0000 00BA UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 00BB 
; 0000 00BC // Analog Comparator initialization
; 0000 00BD // Analog Comparator: Off
; 0000 00BE // The Analog Comparator's positive input is
; 0000 00BF // connected to the AIN0 pin
; 0000 00C0 // The Analog Comparator's negative input is
; 0000 00C1 // connected to the AIN1 pin
; 0000 00C2 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 00C3 ADCSRB=(0<<ACME);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 00C4 // Digital input buffer on AIN0: On
; 0000 00C5 // Digital input buffer on AIN1: On
; 0000 00C6 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 00C7 
; 0000 00C8 // ADC initialization
; 0000 00C9 // ADC disabled
; 0000 00CA ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 00CB 
; 0000 00CC // SPI initialization
; 0000 00CD // SPI disabled
; 0000 00CE SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 00CF 
; 0000 00D0 
; 0000 00D1 // ADC initialization
; 0000 00D2 // ADC Clock frequency: 1000,000 kHz
; 0000 00D3 // ADC Voltage Reference: AVCC pin
; 0000 00D4 // ADC Auto Trigger Source: ADC Stopped
; 0000 00D5 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 00D6 // ADC4: On, ADC5: On
; 0000 00D7 DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 00D8 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 00D9 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 00DA ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 00DB 
; 0000 00DC 
; 0000 00DD // TWI initialization
; 0000 00DE // Mode: TWI Master
; 0000 00DF // Bit Rate: 400 kHz
; 0000 00E0 twi_master_init(400);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 00E1 
; 0000 00E2 // Global enable interrupts
; 0000 00E3 #asm("sei")
;PCODE: $00000244 VOL: 0
	sei
;PCODE: $00000245 VOL: 0
; 0000 00E4 twi_master_trans(0x3C, tx_data0, 50, rx_data, 0);
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 00E5 time = 60;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 00E6 kof =  read_adc(3);
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 00E7 met = kof/11;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 00E8 kof = kof/7;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 00E9 while ( time  >0)
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 00EA {
; 0000 00EB     clearDisplay();
;PCODE: $00000260 VOL: 0
; 0000 00EC     for(a = 63; a >= 0; a--)
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 00ED     {
; 0000 00EE         OCR2A = 0;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 00EF         OCR2B = a*4;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 00F0         x = read_adc(0);
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 00F1         y = read_adc(1);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 00F2         x = x-y;
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 00F3         if (x<maxl) maxl = x;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 00F4         if (x>maxr) maxr = x;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 00F5         x = x/16+64;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 00F6         y = y/16;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 00F7         y = y + 32;
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 00F8         drawLine(x0,y0,x,y,1);
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 00F9         x0 = x; y0 = y;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 00FA     }
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 00FB     for(a = 0; a < 64; a++)
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 00FC     {
; 0000 00FD         OCR2A = a*4;
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 00FE         OCR2B = 0;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 00FF         y = read_adc(0);
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 0100         x = read_adc(1);
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0101         x = y-x;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 0102         if (x<maxl) maxl = x;
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0103         if (x>maxr) maxr = x;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 0104         x = x/16+64;
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0105         y = y/16;
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0106         y = 32-y;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0107         drawLine(x0,y0,x,y,1);
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 0108         x0 = x; y0 = y;
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 0109         if(a == 0)
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 010A         {
; 0000 010B            x = read_adc(1);
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 010C            a = read_adc(0);
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 010D            x = (a-x)/4+256;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 010E           if(x<256)
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 010F           {
; 0000 0110             x = 256-x;
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 0111             drawChar(2,7,'-');
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 0112           } else x = x - 256;
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 0113             if(x>99)
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 0114             {
; 0000 0115                 drawChar(19,7,'L');
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 0116                 drawChar(20,7,'V');
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 0117             }
; 0000 0118             else
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0119             {
; 0000 011A                 if(x<10)
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 011B                 drawChar(3,7,0x30+x);
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 011C                 else
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 011D                 {
; 0000 011E                 a = x/10;
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 011F                 x = x - a*10;
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0120                 drawChar(3,7,0x30+a);
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 0121                 drawChar(4,7,0x30+x);
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0122                 }
;PCODE: $00000336 VOL: 0
; 0000 0123             }
;PCODE: $00000337 VOL: 0
; 0000 0124 
; 0000 0125         }
; 0000 0126     }
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0127     drawPixel(64,0,1);
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 0128     drawPixel(64,15,1);
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 0129     drawPixel(64,30,1);
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 012A     drawPixel(64,34,1);
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 012B     drawPixel(64,49,1);
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 012C     drawPixel(64,63,1);
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 012D     drawPixel(64+met,30,1);
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 012E     drawPixel(64+met,34,1);
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 012F     drawPixel(64+met+met,30,1);
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 0130     drawPixel(64+met+met,34,1);
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 0131     drawPixel(64+met+met+met,30,1);
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 0132     drawPixel(64+met+met+met,34,1);
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 0133 //    drawPixel(116,30,1);
; 0000 0134 //    drawPixel(116,34,1);
; 0000 0135     drawPixel(64-met,30,1);
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 0136     drawPixel(64-met,34,1);
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 0137     drawPixel(64-met-met,30,1);
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 0138     drawPixel(64-met-met,34,1);
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0000 0139     drawPixel(64-met-met-met,34,1);
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 013A     drawPixel(64-met-met-met,30,1);
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 013B //    drawPixel(12,30,1);
; 0000 013C //    drawPixel(12,34,1);
; 0000 013D     drawPixel(64+met,49,1);
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 013E     drawPixel(64+met,15,1);
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 013F     drawPixel(64-met,49,1);
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 0140     drawPixel(64-met,15,1);
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 0141     drawString(0,7,"Ô:",2);
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 0142     drawString(16,7,"Ô:",2);
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 0143     drawChar(0,0,'+');
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 0144     drawChar(20,0,'-');
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 0145     if((y>34)|(y<30)) time = 1800;
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 0146     time = time - 1;
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0000 0147     delay_ms(44);
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0000 0148     delay_us(700);
;PCODE: $00000427 VOL: 0
; 0000 0149     for(a = 63; a >= 0; a--)
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 014A     {
; 0000 014B         OCR2A = a*4;
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
; 0000 014C         OCR2B = 0;
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0000 014D         x = read_adc(1);
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 014E         y = read_adc(0);
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
; 0000 014F         x = y-x;
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
; 0000 0150         if (x<maxl) maxl = x;
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 0151         if (x>maxr) maxr = x;
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 0152         x = x/16+64;
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 0153         y = y/16;
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 0154         y = 32-y;
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 0155         drawLine(x0,y0,x,y,1);
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 0156         x0 = x; y0 = y;
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0000 0157     }
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 0158     for(a = 0; a < 64; a++)
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 0159     {
; 0000 015A         OCR2A = 0;
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
; 0000 015B         OCR2B = a * 4;
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0000 015C         y = read_adc(1);
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 015D         x = read_adc(0);
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0000 015E         x = x-y;
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 015F         if (x<maxl) maxl = x;
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 0160         if (x>maxr) maxr = x;
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
; 0000 0161         x = x/16+64;
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0000 0162         y = y/16;
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 0163         y = y + 32 ;
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 0164         drawLine(x0,y0,x,y,1);
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 0165         x0 = x; y0 = y;
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 0166       if(a == 0)
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 0167       {
; 0000 0168 
; 0000 0169             x = read_adc(0);
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 016A             a = read_adc(1);
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 016B            x = (a-x)/4+256;
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 016C           if(x<256)
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
; 0000 016D           {
; 0000 016E             x = 256-x;
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0000 016F             drawChar(18,7,'-');
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0000 0170           } else x = x - 256;
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 0171             if(x>99)
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0000 0172             {
; 0000 0173                 drawChar(19,7,'L');
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 0174                 drawChar(20,7,'V');
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0000 0175             }
; 0000 0176             else
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 0177             {
; 0000 0178                 if(x<10)
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
; 0000 0179                 drawChar(19,7,0x30+x);
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 017A                 else
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
; 0000 017B                 {
; 0000 017C                 a = x/10;
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 017D                 x = x - a*10;
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
; 0000 017E                 drawChar(19,7,0x30+a);
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
; 0000 017F                 drawChar(20,7,0x30+x);
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 0180                 }
;PCODE: $000004FD VOL: 0
; 0000 0181             }
;PCODE: $000004FE VOL: 0
; 0000 0182       }
; 0000 0183     }
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
; 0000 0184     x = -maxl/kof;
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0000 0185                 if(x<10)
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
; 0000 0186                 {
; 0000 0187                     drawChar(16,0,'0');
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 0188                     drawChar(18,0,0x30+x);
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
; 0000 0189                 }
; 0000 018A                 else
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
; 0000 018B                 {
; 0000 018C                     a = x/10;
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
; 0000 018D                     x = x - a*10;
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
; 0000 018E                     drawChar(16,0,0x30+a);
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0000 018F                     drawChar(18,0,0x30+x);
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
; 0000 0190                 }
;PCODE: $00000535 VOL: 0
; 0000 0191                 drawChar(17,0,'.');
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 0192                 drawChar(19,0,'v');
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0000 0193     x = maxr/kof;
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
; 0000 0194                 if(x<10)
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
; 0000 0195                 {
; 0000 0196                     drawChar(1,0,'0');
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
; 0000 0197                     drawChar(3,0,0x30+x);
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
; 0000 0198                 }
; 0000 0199                 else
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
; 0000 019A                 {
; 0000 019B                     a = x/10;
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
; 0000 019C                     x = x - a*10;
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
; 0000 019D                     drawChar(1,0,0x30+a);
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
; 0000 019E                     drawChar(3,0,0x30+x);
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
; 0000 019F                 }
;PCODE: $0000056F VOL: 0
; 0000 01A0                 drawChar(2,0,'.');
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
; 0000 01A1                 drawChar(4,0,'v');
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
; 0000 01A2     display();
;PCODE: $0000057C VOL: 0
; 0000 01A3     if((y>34)|(y<30)) time = 1200;
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
; 0000 01A4     maxl = 0;
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
; 0000 01A5     maxr = 0;
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
; 0000 01A6 
; 0000 01A7       // Place your code here
; 0000 01A8 
; 0000 01A9 
; 0000 01AA }
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
; 0000 01AB     bufer[0] = 0x80;
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
; 0000 01AC     bufer[1] = 0xAE;
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 01AD     twi_master_trans(0x3C, bufer, 2, rx_data, 0) ;
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0000 01AE 
; 0000 01AF          #asm("cli")                     // äàëüøå äåéñòâèÿ ïî âûêëþ÷åíèþ
;PCODE: $0000059E VOL: 0
	cli
;PCODE: $0000059F VOL: 0
; 0000 01B0             TWCR = 0;
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
; 0000 01B1             DDRC=DDRB=DDRD=0;
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 01B2             PORTC=PORTD=0;
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0000 01B3             PORTB=0x00;
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
; 0000 01B4             ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
; 0000 01B5         TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
; 0000 01B6         TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
; 0000 01B7 
; 0000 01B8             ADMUX=00;
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
; 0000 01B9             ADCSRA=0x00;
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
; 0000 01BA             MCUCR = 0x10;
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
; 0000 01BB 
; 0000 01BC             sleep_enable(); //ðàçðåøåíèå ñïÿùåãî ðåæèìà
;PCODE: $000005B7 VOL: 0
; 0000 01BD             powerdown();
;PCODE: $000005B8 VOL: 0
; 0000 01BE 
; 0000 01BF 
; 0000 01C0 }
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0

	.DSEG
_0x48:
	.BYTE 0x6
